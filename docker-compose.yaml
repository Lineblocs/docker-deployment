version: "3.8"
#https://github.com/compose-spec/compose-spec/blob/master/spec.md#using-extensions-as-fragments
x-logging: &default-logging
  options:
    max-size: "100m"
    max-file: "5"
  driver: json-file
services:
  # hook in case we need to add init behavior
  # every root service (no depends_on) should depend on init
  init:
    image: lineblocs/init:${VERSION}
    logging: *default-logging
    container_name: lineblocs-init
    command: /bin/sh -c "./scripts/configure_env_for_deployments.sh"
    environment:
      - LOCAL_ROOT=${LOCAL_ROOT}
      - HACK_LOCAL_ROOT_PARENT=${HACK_LOCAL_ROOT_PARENT}
  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "8018:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
    environment:
      - TRUST_DOWNSTREAM_PROXY=true
    networks:
      - lineblocs_internal
  nginx-acme-companion:
    image: nginxproxy/acme-companion
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme:/etc/acme.sh
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    networks:
      - lineblocs_internal
  user_app:
    image: lineblocs/user-app:${VERSION}
    logging: *default-logging
    container_name: lineblocs-app
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=app.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8000
    networks:
      - lineblocs_internal
    depends_on:
      init:
        condition: service_completed_successfully
  site:
    image: lineblocs/site:${VERSION}
    logging: *default-logging
    container_name: lineblocs-site
    restart: unless-stopped
    volumes:
      - ./assets:/var/www/html/public/assets
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USERNAME=${CONFIG_DB_USER:-}
      - DB_PASSWORD=${CONFIG_DB_PASSWORD:-}
      - DB_DATABASE=${CONFIG_DB_NAME:-}
      - DB_OPENSIPS_DATABASE=${CONFIG_DB_OPENSIPS_DATABASE:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8080
    #volumes:
    #  - db:/var/lib/postgresql/data
    networks:
      - lineblocs_internal
  ts_bindings:
    image: lineblocs/ts-bindings:${VERSION}
    logging: *default-logging
    container_name: lineblocs-ts-bindings
    restart: unless-stopped
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
    networks:
      - lineblocs_internal
    depends_on:
      init:
        condition: service_completed_successfully
  editor: 
    image: lineblocs/flow-designer:${VERSION}
    logging: *default-logging
    container_name: lineblocs-editor
    restart: unless-stopped
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=editor.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=3000
    networks:
      - lineblocs_internal
    depends_on:
      init:
        condition: service_completed_successfully
  route_editor:
    image: lineblocs/call-route-editor:${VERSION}
    logging: *default-logging
    container_name: lineblocs-route-editor
    restart: unless-stopped
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=call-route-editor.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8005
    networks:
      - lineblocs_internal
    depends_on:
      init:
        condition: service_completed_successfully
  internals_api:
    image: lineblocs/internals-api:${VERSION}
    logging: *default-logging
    container_name: lineblocs-internals-api
    restart: unless-stopped
    environment:
      - LINEBLOCS_VERSION=${VERSION}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - VIRTUAL_HOST=internals.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8010
      - HTTP_PORT=8010
      - HTTPS_PORT=7443
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USER=${CONFIG_DB_USER:-}
      - DB_PASS=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_NAME:-}
      - DB_OPENSIPS_DATABASE=${CONFIG_DB_OPENSIPS_DATABASE:-}
      - USE_DOTENV=off
      - USE_TLS=off
      - USE_LIMIT_MIDDLEWARE=off
    networks:
      - lineblocs_internal
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    logging: *default-logging
    container_name: lineblocs-phpmyadmin
    restart: unless-stopped
    environment:
      - PMA_HOST=${CONFIG_DB_HOST:-}
      - PMA_PORT=${CONFIG_DB_PORT:-}
      - MYSQL_ROOT_PASSWORD=${CONFIG_DB_ROOT_PASSWORD:-}
      - VIRTUAL_HOST=phpmyadmin.${DEPLOYMENT_DOMAIN}
      - VIRTUAL_PORT=8015
    networks:
      - lineblocs_internal

  # start of voip definitions
  opensips:
    image: lineblocs/opensips-proxy:${VERSION}
    logging: *default-logging
    container_name: lineblocs-opensips
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USER=${CONFIG_DB_USERNAME:-}
      - DB_PASSWORD=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_OPENSIPS_DATABASE:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - HTTP_SCHEME=${API_HTTP_SCHEME}
      - RTPPROXY_IPV4=${RTPPROXY_IPV4}
      - LINEBLOCS_KEY=${LINEBLOCS_KEY}
    network_mode: "host"
  rtpproxy:
    image: lineblocs/rtpproxy:${VERSION}
    logging: *default-logging
    container_name: lineblocs-rtpproxy
    restart: unless-stopped
    environment:
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - PUBLIC_IPV4=${RTPPROXY_IPV4}
      - PRIVATE_IPV4=127.0.0.1
    network_mode: "host"
  asterisk:
    image: lineblocs/asterisk:${VERSION}
    logging: *default-logging
    container_name: lineblocs-asterisk
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USERNAME=${CONFIG_DB_USERNAME:-}
      - DB_PASSWORD=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_NAME:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - AMI_USER=${AMI_USER}
      - AMI_PASS=${AMI_PASS}
      - AMI_PORT=${AMI_PORT}
      - AMI_HOST=${AMI_HOST}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - LINEBLOCS_KEY=${LINEBLOCS_KEY}
    network_mode: "host"
  ari_apps:
    image: lineblocs/ari-apps:${VERSION}
    logging: *default-logging
    container_name: lineblocs-ari-apps
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USERNAME=${CONFIG_DB_USERNAME:-}
      - DB_PASSWORD=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_NAME:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - ARI_HOST=${ARI_HOST}
      - ARI_PORT=${ARI_PORT}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - ARI_USE_PROXY=${ARI_USE_PROXY}
      - ARI_URL=http://${ARI_HOST}:8088/ari
      - ARI_WSURL=ws://${ARI_HOST}:8088/ari/events
      - LINEBLOCS_KEY=${LINEBLOCS_KEY}
      - LOG_LEVEL=${ARI_LOG_LEVEL}
    network_mode: "host"
  recordings_mngrs:
    image: lineblocs/recordings-mngr:${VERSION}
    logging: *default-logging
    container_name: lineblocs-recordings-mngrs
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USER=${CONFIG_DB_USER:-}
      - DB_PASS=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_NAME:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - ARI_HOST=${ARI_HOST}
      - ARI_PORT=${ARI_PORT}
      - ARI_USERNAME=${ARI_USERNAME}
      - ARI_PASSWORD=${ARI_PASSWORD}
      - ARI_USE_PROXY=${ARI_USE_PROXY}
      - LINEBLOCS_KEY=${LINEBLOCS_KEY}
      - LOG_LEVEL=${ARI_LOG_LEVEL}
    network_mode: "host"
  media_monitor:
    image: lineblocs/media-monitor:${VERSION}
    logging: *default-logging
    container_name: lineblocs-media-monitor
    restart: unless-stopped
    environment:
      - DB_HOST=${CONFIG_DB_HOST:-}
      - DB_USER=${CONFIG_DB_USER:-}
      - DB_PASS=${CONFIG_DB_PASSWORD:-}
      - DB_NAME=${CONFIG_DB_NAME:-}
      - DEPLOYMENT_DOMAIN=${DEPLOYMENT_DOMAIN}
      - AMI_HOST=${AMI_HOST}
      - AMI_USER=${AMI_USER}
      - AMI_PASS=${AMI_PASS}
      - AMI_PORT=${AMI_PORT}
      - IP_ADDRESS=${AMI_HOST}
      - RUNNING_K8S_METRICS_SERVER=off
    network_mode: "host"
volumes:
  workspace:
    name: ${WORKSPACE_DOCKER_MOUNT}
  # the data volume is only needed for backward compatibility; when users upgrade
  # from an old Airbyte version that relies on file-based configs, the server needs
  # to read this volume to copy their configs to the database
  data:
    name: ${DATA_DOCKER_MOUNT}
  db:
    name: ${DB_DOCKER_MOUNT}
networks:
  lineblocs_public:
  lineblocs_internal:
  lineblocs_voip:
